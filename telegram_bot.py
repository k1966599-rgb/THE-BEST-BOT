import logging
import os
from datetime import datetime
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# Import the analysis engine and config
from config import get_config, WATCHLIST
# Note: The interactive part of the bot that calls get_ranked_analysis_for_symbol
# will need a larger refactor to get access to the okx_fetcher instance.
# This is a known limitation for now.
import time
import threading
import concurrent.futures
from okx_data import OKXDataFetcher
from run_bot import get_ranked_analysis_for_symbol
from telegram_sender import send_telegram_message

logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

bot_state = {"is_active": True}

def get_main_keyboard() -> InlineKeyboardMarkup:
    """Creates the main interactive keyboard."""
    keyboard = [
        [
            InlineKeyboardButton("‚ñ∂Ô∏è ÿ™ÿ¥ÿ∫ŸäŸÑ", callback_data="start_bot"),
            InlineKeyboardButton("‚èπÔ∏è ÿ•ŸäŸÇÿßŸÅ", callback_data="stop_bot"),
        ],
        [InlineKeyboardButton("üîç ÿ™ÿ≠ŸÑŸäŸÑ", callback_data="analyze_menu")],
    ]
    return InlineKeyboardMarkup(keyboard)

def get_coin_list_keyboard() -> InlineKeyboardMarkup:
    """Creates the keyboard for coin selection."""
    keyboard = [
        [InlineKeyboardButton(coin, callback_data=f"coin_{coin}") for coin in WATCHLIST[i:i+2]]
        for i in range(0, len(WATCHLIST), 2)
    ]
    keyboard.append([InlineKeyboardButton("üîô ÿ±ÿ¨Ÿàÿπ", callback_data="start_menu")])
    return InlineKeyboardMarkup(keyboard)

def get_start_message_text() -> str:
    """Creates the new, elaborate start message text."""
    config = get_config()
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    status = "üü¢ ŸÖÿ™ÿµŸÑ Ÿàÿ¨ÿßŸáÿ≤ ŸÑŸÑÿπŸÖŸÑ" if bot_state["is_active"] else "üî¥ ŸÖÿ™ŸàŸÇŸÅ"
    platform = config['trading'].get('EXCHANGE_ID', 'N/A').upper()

    # This is the user's requested format
    text = (
        "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n"
        "‚ïë            üíé THE BEST BOT üíé           ‚ïë\n"
        "‚ïë         üéØ ŸÜÿ∏ÿßŸÖ ÿßŸÑÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑŸÅŸÜŸä ÿßŸÑŸÖÿ™ŸÇÿØŸÖ üéØ         ‚ïë\n"
        "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n"
        f"üïê **ÿßŸÑÿ™ŸàŸÇŸäÿ™:** {current_time}\n"
        f"üì∂ **ÿ≠ÿßŸÑÿ© ÿßŸÑŸÜÿ∏ÿßŸÖ:** {status}\n"
        f"üåê **ÿßŸÑŸÖŸÜÿµÿ©:** üèõÔ∏è {platform} Exchange\n\n"
        "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n"
        "üìã **ÿßŸÑÿÆÿØŸÖÿßÿ™ ÿßŸÑŸÖÿ™ŸàŸÅÿ±ÿ©:**\n\n"
        "üîç **ÿßŸÑÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑŸÅŸÜŸä ÿßŸÑÿ¥ÿßŸÖŸÑ** ‚ö°\n"
        "   üí∞ ÿ™ÿ≠ŸÑŸäŸÑ ÿ£ŸÉÿ®ÿ± 20 ÿπŸÖŸÑÿ© ÿ±ŸÇŸÖŸäÿ©\n"
        "   ‚è∞ 7 ÿ•ÿ∑ÿßÿ±ÿßÿ™ ÿ≤ŸÖŸÜŸäÿ© ŸÖÿÆÿ™ŸÑŸÅÿ©\n"
        "   üìà ŸÖÿ§ÿ¥ÿ±ÿßÿ™ ŸÅŸÜŸäÿ© ŸÖÿ™ŸÇÿØŸÖÿ©\n\n"
        "üìä **ÿ£ÿØŸàÿßÿ™ ÿßŸÑÿ™ÿ≠ŸÑŸäŸÑ:** üõ†Ô∏è\n"
        "   üåü ŸÜÿ≥ÿ® ŸÅŸäÿ®ŸàŸÜÿßÿ™ÿ¥Ÿä\n"
        "   üî¥ ÿßŸÑÿØÿπŸàŸÖ ŸàÿßŸÑŸÖŸÇÿßŸàŸÖÿßÿ™\n"
        "   üìâ ÿßŸÑŸÇŸÜŸàÿßÿ™ ÿßŸÑÿ≥ÿπÿ±Ÿäÿ©\n"
        "   üèõÔ∏è ÿßŸÑŸÜŸÖÿßÿ∞ÿ¨ ÿßŸÑŸÉŸÑÿßÿ≥ŸäŸÉŸäÿ©\n"
        "   üéØ ŸÖŸÜÿßÿ∑ŸÇ ÿßŸÑÿπÿ±ÿ∂ ŸàÿßŸÑÿ∑ŸÑÿ®\n\n"
        "üéØ **ÿßŸÑÿ™ŸàÿµŸäÿßÿ™ ÿßŸÑÿ∞ŸÉŸäÿ©:** üß†\n"
        "   ‚úÖ ŸÜŸÇÿßÿ∑ ÿßŸÑÿØÿÆŸàŸÑ ÿßŸÑŸÖÿ´ÿßŸÑŸäÿ©\n"
        "   üõë ŸÖÿ≥ÿ™ŸàŸäÿßÿ™ ŸàŸÇŸÅ ÿßŸÑÿÆÿ≥ÿßÿ±ÿ©\n"
        "   üíµ ÿ£ŸáÿØÿßŸÅ ÿßŸÑÿ±ÿ®ÿ≠ ÿßŸÑŸÖÿ≠ÿ≥Ÿàÿ®ÿ©\n"
        "   ‚öñÔ∏è ÿ•ÿØÿßÿ±ÿ© ÿßŸÑŸÖÿÆÿßÿ∑ÿ±\n\n"
        "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n"
        "üöÄ **ÿßŸÑÿ®Ÿàÿ™ ÿ¨ÿßŸáÿ≤ ŸÑŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ** ü§ñ\n"
        "üì± ÿßÿ≥ÿ™ÿÆÿØŸÖ ÿßŸÑÿ£ÿ≤ÿ±ÿßÿ± ÿ£ÿØŸÜÿßŸá ŸÑŸÑÿ™ŸÅÿßÿπŸÑ ŸÖÿπ ÿßŸÑŸÜÿ∏ÿßŸÖ üëá\n\n"
        "üí° **ŸÜÿµŸäÿ≠ÿ©:** üìù ŸÑŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ÿ£ŸÅÿ∂ŸÑ ÿßŸÑŸÜÿ™ÿßÿ¶ÿ¨ÿå\n"
        "ÿ±ÿßÿ¨ÿπ ÿßŸÑÿ™ÿ≠ŸÑŸäŸÑÿßÿ™ ÿ®ÿßŸÜÿ™ÿ∏ÿßŸÖ Ÿàÿ™ÿßÿ®ÿπ ÿ™ÿ∑Ÿàÿ±ÿßÿ™ ÿßŸÑÿ≥ŸàŸÇ üìä\n\n"
        "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n"
        "‚ïë  üî• ŸÖÿ±ÿ≠ÿ®ÿßŸã ÿ®ŸÉ ŸÅŸä ÿ£ŸÇŸàŸâ ŸÜÿ∏ÿßŸÖ ÿ™ÿ≠ŸÑŸäŸÑ ŸÅŸÜŸä üî•  ‚ïë\n"
        "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    )
    return text

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handler for the /start command."""
    await update.message.reply_text(
        text=get_start_message_text(),
        reply_markup=get_main_keyboard(),
        parse_mode='HTML' # Using HTML for the bolding and other formatting
    )

async def main_button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handler for all button presses."""
    query = update.callback_query
    await query.answer()

    callback_data = query.data

    if callback_data == "start_menu":
        await query.edit_message_text(text=get_start_message_text(), reply_markup=get_main_keyboard(), parse_mode='HTML')

    elif callback_data == "start_bot":
        bot_state["is_active"] = True
        await query.edit_message_text(text=get_start_message_text(), reply_markup=get_main_keyboard(), parse_mode='HTML')

    elif callback_data == "stop_bot":
        bot_state["is_active"] = False
        await query.edit_message_text(text=get_start_message_text(), reply_markup=get_main_keyboard(), parse_mode='HTML')

    elif callback_data == "analyze_menu":
        if not bot_state["is_active"]:
            await query.message.reply_text("ÿßŸÑÿ®Ÿàÿ™ ŸÖÿ™ŸàŸÇŸÅ ÿ≠ÿßŸÑŸäŸãÿß. Ÿäÿ±ÿ¨Ÿâ ÿßŸÑÿ∂ÿ∫ÿ∑ ÿπŸÑŸâ 'ÿ™ÿ¥ÿ∫ŸäŸÑ' ÿ£ŸàŸÑÿßŸã.")
            return
        await query.edit_message_text(text="ÿßŸÑÿ±ÿ¨ÿßÿ° ÿßÿÆÿ™Ÿäÿßÿ± ÿπŸÖŸÑÿ© ŸÑŸÑÿ™ÿ≠ŸÑŸäŸÑ:", reply_markup=get_coin_list_keyboard())

    elif callback_data.startswith("coin_"):
        symbol = callback_data.split("_", 1)[1]
        await query.edit_message_text(text=f"ÿ¨ÿßÿ±Ÿä ÿ™ÿ≠ŸÑŸäŸÑ {symbol}ÿå ŸÇÿØ Ÿäÿ≥ÿ™ÿ∫ÿ±ŸÇ Ÿáÿ∞ÿß ÿ®ÿπÿ∂ ÿßŸÑŸàŸÇÿ™...")

        try:
            config = get_config()
            okx_fetcher = context.bot_data.get('okx_fetcher')
            if not okx_fetcher:
                raise ValueError("OKX Fetcher not found in bot context.")

            final_report = get_ranked_analysis_for_symbol(symbol, config, okx_fetcher)
            send_telegram_message(final_report)
            await query.message.reply_text(text=get_start_message_text(), reply_markup=get_main_keyboard(), parse_mode='HTML')
        except Exception as e:
            logger.error(f"Error during analysis for {symbol}: {e}")
            await query.message.reply_text(f"ÿ≠ÿØÿ´ ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ÿ™ÿ≠ŸÑŸäŸÑ {symbol}. Ÿäÿ±ÿ¨Ÿâ ÿßŸÑŸÖÿ≠ÿßŸàŸÑÿ© ŸÖÿ±ÿ© ÿ£ÿÆÿ±Ÿâ.")

def main() -> None:
    """Main function to run the bot."""
    config = get_config()
    token = config['telegram']['BOT_TOKEN']
    if not token:
        logger.error("Error: Telegram bot token not found in .env file.")
        return

    logger.info("üöÄ Initializing OKX Data Fetcher for the interactive bot...")
    okx_fetcher = OKXDataFetcher()

    def preload_data():
        """Fetches and caches all required historical data in the background."""
        logger.info("‚è≥ Starting background pre-loading of all historical data...")
        symbols_to_preload = list(set([s.replace('/', '-') for s in WATCHLIST]))

        with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:
            # We use map to fetch data for all symbols in parallel.
            # The fetch function now uses caching, so this will only fetch if not already cached.
            executor.map(okx_fetcher.fetch_historical_data, symbols_to_preload)

        logger.info("‚úÖ Background pre-loading of historical data complete.")

    preload_thread = threading.Thread(target=preload_data, daemon=True)
    preload_thread.start()

    application = Application.builder().token(token).build()
    application.bot_data['okx_fetcher'] = okx_fetcher

    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CallbackQueryHandler(main_button_callback))

    logger.info("Interactive bot is starting...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
